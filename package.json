{
  "name": "calva-backseat-driver",
  "displayName": "Calva Backseat Driver",
  "description": "Make CoPilot an Interactive Programmer, tools for VS Code CoPilot. Can also be run as an MCP server",
  "version": "0.0.5",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Better Than Tomorrow",
    "email": "pez@pezius.com"
  },
  "icon": "assets/extension-icon-128x128.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/BetterThanTomorrow/calva-backseat-driver.git"
  },
  "engines": {
    "vscode": ">=1.99.0",
    "node": ">=20.18.0"
  },
  "enabledApiProposals": [
    "extensionRuntime"
  ],
  "categories": [
    "Programming Languages",
    "AI",
    "Other"
  ],
  "keywords": [
    "clojure",
    "clojurescript",
    "mcp",
    "model-context-protocol",
    "ai"
  ],
  "activationEvents": [
    "onLanguage:clojure"
  ],
  "main": "out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Calva Backseat Driver",
      "properties": {
        "calva-backseat-driver.enableReplEvaluation": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable the REPL evaluation tool.\n\n **⚠️ SECURITY WARNING**: _When enabled and you have also started the MCP server, any network client with access to the MCP server can execute arbitrary code in your REPL environment._ That said, CoPilot and other compliant MCP clients will default to a low-trust mode with confirmation before any evaluation.",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "calva-backseat-driver.startMcpServer",
        "category": "Calva Backseat Driver",
        "enablement": "!:calva-backseat-driver/started?",
        "title": "Start the MCP socket server"
      },
      {
        "command": "calva-backseat-driver.stopMcpServer",
        "category": "Calva Backseat Driver",
        "enablement": ":calva-backseat-driver/started?",
        "title": "Stop the MCP socket server"
      },
      {
        "command": "calva-backseat-driver.openLogFile",
        "category": "Calva Backseat Driver",
        "title": "Open log file"
      }
    ],
    "keybindings": [],
    "languageModelTools": [
      {
        "name": "evaluate_clojure_code",
        "tags": [
          "clojure",
          "repl"
        ],
        "toolReferenceName": "eval-clojure",
        "displayName": "Evaluate Clojure Code",
        "modelDescription": "Evaluate Clojure/ClojureScript code using Calva's REPL connection. Enables AI Interactive Programming. The REPL holds the truth. Use this to make sure your seggested edits work as you advertise. Also works with ClojureScript, Babashka, nbb, Joyride, Basilisp, and any nREPL enabled Clojure-ish enough language.",
        "userDescription": "Evaluate Clojure or ClojureScript code in a connected REPL.",
        "canBeReferencedInPrompt": true,
        "icon": "$(terminal-bash)",
        "when": "config.calva-backseat-driver.enableReplEvaluation",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code to evaluate"
            },
            "namespace": {
              "type": "string",
              "description": "Fully qualified namespace in which to evaluate the code. E.g. if calling functions in a file you are reading, it is probably the namespace of that file that should be provided. If it is the first time you use a namespace, start with evaluating its ns-form in the `user` or `cljs.user` namespace (as appropriate)."
            },
            "replSessionKey": {
              "type": "string",
              "description": "The Calva REPL session to evaluate the code via. It should be `clj` for the Clojure REPL, `cljs` for the ClojureScript REPL and `cljc` for the current session for `.cljc` files.",
              "enum": [
                "clj",
                "cljs",
                "cljc"
              ]
            }
          },
          "required": [
            "code",
            "namespace",
            "replSessionKey"
          ]
        }
      },
      {
        "name": "get_symbol_info",
        "tags": [
          "clojure",
          "documentation"
        ],
        "toolReferenceName": "clojure-symbol",
        "displayName": "Clojure Symbol Info",
        "modelDescription": "Get detailed information about a Clojure symbol from the connected REPL.",
        "userDescription": "Look up documentation for a Clojure symbol.",
        "canBeReferencedInPrompt": true,
        "icon": "$(symbol-namespace)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "clojureSymbol": {
              "type": "string",
              "description": "The symbol to look up info for"
            },
            "namespace": {
              "type": "string",
              "description": "Fully qualified namespace in which to evaluate the code. E.g. if calling functions in a file you are reading, it is probably the namespace of that file that should be provided."
            },
            "replSessionKey": {
              "type": "string",
              "description": "The Calva REPL session to evaluate the code in. For Clojure, ClojureScript, and Common, respectively. Often the same as the extension of the file you are working with. One of `clj`, `cljs`, or `cljc`.",
              "enum": [
                "clj",
                "cljs",
                "cljc"
              ]
            }
          },
          "required": [
            "clojureSymbol",
            "namespace",
            "replSessionKey"
          ]
        }
      },
      {
        "name": "get_clojuredocs_info",
        "tags": [
          "clojure",
          "documentation"
        ],
        "toolReferenceName": "clojuredocs",
        "displayName": "clojuredocs.org Lookup",
        "modelDescription": "Look up information, examples, see also:s, and more about a Clojure Core symbol from clojuredocs.org.",
        "userDescription": "Get examples and usage from clojuredocs.org",
        "canBeReferencedInPrompt": true,
        "icon": "$(globe)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "clojureSymbol": {
              "type": "string",
              "description": "The symbol to look up on clojuredocs.org"
            }
          },
          "required": [
            "clojureSymbol"
          ]
        }
      },
      {
        "name": "get_repl_output_log",
        "tags": [
          "clojure",
          "repl"
        ],
        "toolReferenceName": "calva-output",
        "displayName": "Calva REPL Output Log",
        "modelDescription": "Get REPL output messages from  Calva output window. Returns REPL output since `since-line`. Start with since-line=0 and use the last line number from previous output for subsequent calls. This is your window into the running application. Invoke it often as files are edited and/or you evaluate code.",
        "userDescription": "Read Calva's REPL output log",
        "canBeReferencedInPrompt": true,
        "icon": "$(output)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "sinceLine": {
              "type": "integer",
              "description": "Output line-number after which you want output. Use `0` for your first request of output."
            }
          },
          "required": [
            "sinceLine"
          ]
        }
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/ dist/",
    "preclean": "npm install",
    "watch": "clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"1.3.1\"},cider/cider-nrepl {:mvn/version,\"0.52.1\"}}}' -M -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware shadow.cljs.devtools.server.nrepl/middleware]\"",
    "test": "node out/extension-tests.js",
    "pretest": "npm run compile",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension :test-compile :stdio-wrapper",
    "precompile": "npm run clean",
    "release-test": "node out/extension-tests.js",
    "release": "npx shadow-cljs release :extension :test-compile :stdio-wrapper",
    "package": "npx vsce package --githubBranch master",
    "vscode:prepublish": "npm run clean && npm run release"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36"
  },
  "devDependencies": {
    "@types/node": "^22.14.1",
    "@types/vscode": "^1.98.0",
    "@vscode/test-electron": "~2.5.2",
    "@vscode/vsce": "^3.3.2",
    "ovsx": "~0.10.1",
    "rimraf": "^6.0.1",
    "shadow-cljs": "2.28.23"
  },
  "extensionDependencies": [
    "betterthantomorrow.calva"
  ]
}
